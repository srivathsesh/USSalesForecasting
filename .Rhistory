geom_smooth(se = F) +
theme(legend.text = element_text(size = 6),
legend.title = element_text(size = 7),
panel.background = element_rect(fill = "white",color = "black"),
panel.grid = element_line(colour = "gray92"),
plot.subtitle = element_text(size = 8),
axis.title.x = element_text(size = 6)) +
labs(title = "",
subtitle = "removed 2015; added 2012 for exploration purposes",
y = "") -> agrExperimentPlot
bgr %>%
rbind(agr) %>%
mutate(Event = factor(ifelse(RecessionCorrection==0,"non-recession","recession/correction"))) %>%
ggplot(aes(x=index, y = Sales_in_trillions, group = period))  +
geom_line(aes(col = period)) +
geom_point(aes(col = period, shape = Event)) +
geom_smooth(se = F) + theme(legend.text = element_text(size = 6),
legend.title = element_text(size = 7),
panel.background = element_rect(fill = "white",color = "black"),
panel.grid = element_line(colour = "gray92"),
axis.title.x = element_text(size = 6)) +
labs(title = "",
y = "Sales in trillions") -> SlopeInspection
gridExtra::grid.arrange(SlopeInspection,agrExperimentPlot, ncol = 2, top = "Sales during periods before and after great recession")
Sales %>%
ggplot(aes(x=YearMonth, y = log(Sales_in_trillions))) +
geom_line(col = "grey") + geom_point(aes(col = ifelse(RecessionYears == 1, 'red',ifelse(RecessionCorrection == 1,'chocolate1','black'))),shape = 1,size = 0.8) +
scale_color_identity() +
labs(title = "Total Business Sales in US - log transformation",  caption = "Red markers - US recession years \n
Orange markers- 2016 market correction") +
ylab("log(Sales in trillions of dollars)") + xlab("") + scale_x_date(date_breaks = "3 years",date_labels = "%Y") +
theme(panel.background = element_rect(fill = "white",color = "black"),
panel.grid = element_line(colour = "gray92"),
legend.position = "none",
plot.caption  = element_text(colour = "red",face = "bold"),
plot.title = element_text(hjust = 0.5))
#===========================================================================================
#     STL decomposition
#     Prediction made with ETS model with no seasonality on the seasonally adjusted data and
#    SNAIVE on the seasonal component (WHICH IS DEFAULT)
#===========================================================================================
decomposition_model(STL(log(Sales_in_trillions) ~ trend() + season(window = "periodic")),
ETS(season_adjust ~ season("N"))) -> dcmp_spec
benchmark <- getModelsTrained(2010,2014,2015,2019)
benchmark$forecasts %>%
filter(.model %in% c('stl','ets','snaive','hw_a','arima')) %>%
autoplot(Sales, level = NULL) +  geom_line(col = "grey") +
labs(title = "Benchmark model forecasts", y = "Sales in trillions") +
theme(plot.title = element_text(hjust = 0.5,size = 10),
panel.background = element_rect(fill = "white",color = "black"),
panel.grid = element_line(colour = "gray92"),
axis.text = element_text(size = 8),
axis.title.y = element_text(size = 8))
benchmark$accuracy %>%
filter(.model %in% c('stl','ets','snaive','hw_a','arima')) %>%
knitr::kable(digits = 3, caption = "Benchmark model performance")
benchmark$ModelStack %>% select(ets) %>% report()
benchmark$ModelStack %>%
select(ets) %>%
forecast(h = "5 years") %>%
autoplot(Sales, level = NULL) + geom_line(col = "grey") +
labs(title = "ETS model performance",y = "Sales in trillions", subtitle = "Blue line indicate point forecast") +
theme(plot.title = element_text(hjust = 0.5,size = 10),
panel.background = element_rect(fill = "white",color = "black"),
panel.grid = element_line(colour = "gray92"),
axis.text = element_text(size = 8),
axis.title.y = element_text(size = 8),
plot.subtitle = element_text(colour = "blue", hjust = 0.5)
)
benchmark2 <- getModelsTrained(2010,2015,2016,2019)
benchmark2$ModelStack %>%
select(ets) %>%
forecast(h = "4 years") %>%
autoplot(Sales, level = NULL) + geom_line(col = "grey") +
labs(title = "ETS model performance when 2015 data is included",y = "Sales in trillions", x ="",subtitle = "Blue line indicate point forecast") +
theme(plot.title = element_text(hjust = 0.5,size = 10),
panel.background = element_rect(fill = "white",color = "black"),
panel.grid = element_line(colour = "gray92"),
axis.text = element_text(size = 8),
axis.title.y = element_text(size = 8),
plot.subtitle = element_text(colour = "blue", hjust = 0.5)
)
benchmark2$accuracy %>%
filter(.model %in% c('stl','ets','snaive','hw_a','arima')) %>%
knitr::kable(digits = 3, caption = "Performance when 2015 data is included in the training")
benchmark3 <- getModelsTrained(1992,2014,2015,2019)
benchmark3$forecasts %>%
filter(.model %in% c('arima',
'K = 1',
'K = 4',
'K = 6',
"LMArima",
'tslm')) %>%
autoplot(Sales, level = NULL) + geom_line(col = "gray") +
labs(title = "Model training on data between 2010-14 and validation on 2015-19",
y = "Sales in trillions",
x = "") +
theme(plot.title = element_text(hjust = 0.5,size = 10),
panel.background = element_rect(fill = "white",color = "black"),
panel.grid = element_line(colour = "gray92"),
axis.text = element_text(size = 8),
axis.title.y = element_text(size = 8)) -> bench3
benchmark4 <- getModelsTrained(2010,2015,2016,2019)
benchmark4$forecasts %>%
filter(.model %in% c('arima',
'K = 1',
'K = 4',
'K = 6',
"LMArima",
'tslm')) %>%
autoplot(Sales, level = NULL) + geom_line(col = "gray")+
labs(title = "Model training on data between 2010-15 and validation on 2016-19",
y = "Sales in trillions",
x = "") +
theme(plot.title = element_text(hjust = 0.5,size = 10),
panel.background = element_rect(fill = "white",color = "black"),
panel.grid = element_line(colour = "gray92"),
axis.text = element_text(size = 8),
axis.title.y = element_text(size = 8)) -> bench4
gridExtra::grid.arrange(bench3,bench4, nrow = 2)
benchmark3$accuracy %>%
knitr::kable(digits = 3, caption = "Additional Benchmark models performance")
benchmark4$accuracy %>%
knitr::kable(digits = 3, caption = "Additional Benchmark models performance - when 2015 data in included in training")
Sales %>%
filter(year(YearMonth) < 2002)%>%
model(ets = ETS(log(Sales_in_trillions))) -> recessionslope
#forecast(h = "1 year") %>%
last5knownyears  <-  twoStepForecast(data = Sales,driftmodel = recessionslope,currentyear = 2014,RecessionYears = c(2015,2016))
last4knownyears  <-  twoStepForecast(data = Sales,driftmodel = recessionslope,currentyear = 2015,RecessionYears = 2016)
last4knownyears$forecasts %>%
as_tibble() %>%
filter(year(YearMonth) < 2020) %>%
as_fable(response = Sales_in_trillions,distribution = .distribution) %>%
mutate(.model = "composite") %>%
accuracy(Sales) -> last4knownyearsMetrics
last4knownyears  <-  twoStepForecast(data = Sales,driftmodel = recessionslope,currentyear = 2015,RecessionYears = 2016)
last4knownyears  <-  twoStepForecast(data = Sales,driftmodel = recessionslope,currentyear = 2015,RecessionYears = 2016)
source('~/Documents/USSalesForecast/twoStepForecast.R')
knitr::opts_chunk$set(echo = F, warning = F,message = F)
library(kfigr)
library(fpp3)
# install.packages("fabletools",repos = "https://tidyverts.org")
library(magrittr)
library(purrr)
library(plotly)
source('twoStepForecast.R')
source('getModelsTrained.R')
source('simulatePaths.R')
#-------------------------------------------
#      Read Data
#-------------------------------------------
TOTBUSSMNSA <- read.csv("TOTBUSSMNSA.csv")
#------------------------
# Convert to tsibble
#------------------------
TOTBUSSMNSA %>%
mutate(DATE = ymd(DATE)) %>%
mutate(YearMonth = yearmonth(DATE),
Sales = TOTBUSSMNSA) %>%
select(-TOTBUSSMNSA,-DATE) %>%
as_tsibble(index = YearMonth) ->Sales
#--------------------------------------------------------
# Add additional indicator variables
#   1. Election Years
#   2. Recession Years
#   3. Sales in Trillions (to be used as response)
#----------------------------------------------------------
Sales %<>%
mutate(
#ElectionYear = ifelse(year(YearMonth) %in% seq(from = 1992,to = 2019, by =4),1,0),
RecessionYears = as.factor(ifelse(year(YearMonth) %in% c(2001,2008,2009),1,0)),
RecessionCorrection = as.factor(ifelse(year(YearMonth) %in% c(2001,2008,2009,2014,2015,2016),1,0)),
Sales_in_trillions = Sales* 1000000/1000000000000)
Description <- data.frame(
Variables = c("YearMonth", "RecessionYears", "RecessionCorrection","Sales", "Sales_in_trillions"),
Description = c(paste(min(Sales$YearMonth),"to", max(Sales$YearMonth)),
"1, during the years 2001,2008 and 2009; 0 otherwise",
"1, during the years 2001,2008,2009 and 2015-16; 0 otherwise",
"Sales in millions (USD)",
"Sales in trillions (USD)"
))
knitr::kable(Description,caption = "data dictionary")
Sales %>%
ggplot(aes(x=YearMonth, y = Sales_in_trillions)) +
geom_line(col = "grey") + geom_point(aes(col = ifelse(RecessionYears == 1, 'red',ifelse(RecessionCorrection == 1,'chocolate1','black'))),shape = 1,size = 0.8) +
scale_color_identity() +
labs(title = "Total Business Sales in US",  caption = "Red markers - US recession years \n
Orange markers- 2016 market correction") +
ylab("Sales in trillions of dollars") + xlab("") + scale_x_date(date_breaks = "3 years",date_labels = "%Y") +
theme(panel.background = element_rect(fill = "white",color = "black"),
panel.grid = element_line(colour = "gray92"),
legend.position = "none",
plot.caption  = element_text(colour = "red",face = "bold"),
plot.title = element_text(hjust = 0.5))
Sales %>%
gg_season(Sales_in_trillions) + theme(plot.title = element_text(hjust = 0.5,size = 10),
panel.background = element_rect(fill = "white",color = "black"),
panel.grid = element_line(colour = "gray92"),
axis.text = element_text(size = 6),
axis.title.y = element_text(size = 8)) +
labs(title = "Seasonality in US Sales", x = "", y = "Sales in trillions") -> s1
Sales %>%
gg_subseries(Sales_in_trillions) + theme(plot.title = element_text(hjust = 0.5,size = 10),
panel.background = element_rect(fill = "white",color = "black"),
panel.grid = element_line(colour = "gray92"),
axis.text = element_text(size = 6),
axis.title.y = element_text(size = 8)) +
labs(title = "Sales increase year over year", x = "", y = "Sales in trillions") -> s2
gridExtra::grid.arrange(s1,s2,nrow = 2)
Sales %>%
filter(year(YearMonth) > 1997 , year(YearMonth) < 2005) %>%
select(YearMonth,Sales_in_trillions,RecessionCorrection) %>%
as_tibble() %>%
#rename(SalesBeforeGreatRecession = Sales_in_trillions) %>%
mutate(index = row_number(),
period = "1999-2005") %>%
select(-YearMonth)-> bgr
Sales %>%
filter(year(YearMonth) > 2012 , year(YearMonth) < 2020) %>%
select(YearMonth,Sales_in_trillions,RecessionCorrection) %>%
as_tibble() %>%
#rename(SalesAfterGreatRecession = Sales_in_trillions) %>%
mutate(index = row_number(),
period = "2013-2019" ) %>%
select(-YearMonth) -> agr
Sales %>%
filter(year(YearMonth) > 2011 , year(YearMonth) < 2020) %>%
filter(!year(YearMonth) == 2015) %>%
select(YearMonth,Sales_in_trillions,RecessionCorrection) %>%
as_tibble() %>%
#rename(SalesAfterGreatRecession = Sales_in_trillions) %>%
mutate(index = row_number(),
period = "2012-2014/2016-2019" ) %>%
select(-YearMonth) -> agrExperiment
bgr %>%
rbind(agrExperiment) %>%
mutate(Event = factor(ifelse(RecessionCorrection==0,"non-recession","recession/correction"))) %>%
ggplot(aes(x=index, y = Sales_in_trillions, group = period))  +
geom_line(aes(col = period)) +
geom_point(aes(col = period, shape = Event)) +
geom_smooth(se = F) +
theme(legend.text = element_text(size = 6),
legend.title = element_text(size = 7),
panel.background = element_rect(fill = "white",color = "black"),
panel.grid = element_line(colour = "gray92"),
plot.subtitle = element_text(size = 8),
axis.title.x = element_text(size = 6)) +
labs(title = "",
subtitle = "removed 2015; added 2012 for exploration purposes",
y = "") -> agrExperimentPlot
bgr %>%
rbind(agr) %>%
mutate(Event = factor(ifelse(RecessionCorrection==0,"non-recession","recession/correction"))) %>%
ggplot(aes(x=index, y = Sales_in_trillions, group = period))  +
geom_line(aes(col = period)) +
geom_point(aes(col = period, shape = Event)) +
geom_smooth(se = F) + theme(legend.text = element_text(size = 6),
legend.title = element_text(size = 7),
panel.background = element_rect(fill = "white",color = "black"),
panel.grid = element_line(colour = "gray92"),
axis.title.x = element_text(size = 6)) +
labs(title = "",
y = "Sales in trillions") -> SlopeInspection
gridExtra::grid.arrange(SlopeInspection,agrExperimentPlot, ncol = 2, top = "Sales during periods before and after great recession")
Sales %>%
ggplot(aes(x=YearMonth, y = log(Sales_in_trillions))) +
geom_line(col = "grey") + geom_point(aes(col = ifelse(RecessionYears == 1, 'red',ifelse(RecessionCorrection == 1,'chocolate1','black'))),shape = 1,size = 0.8) +
scale_color_identity() +
labs(title = "Total Business Sales in US - log transformation",  caption = "Red markers - US recession years \n
Orange markers- 2016 market correction") +
ylab("log(Sales in trillions of dollars)") + xlab("") + scale_x_date(date_breaks = "3 years",date_labels = "%Y") +
theme(panel.background = element_rect(fill = "white",color = "black"),
panel.grid = element_line(colour = "gray92"),
legend.position = "none",
plot.caption  = element_text(colour = "red",face = "bold"),
plot.title = element_text(hjust = 0.5))
#===========================================================================================
#     STL decomposition
#     Prediction made with ETS model with no seasonality on the seasonally adjusted data and
#    SNAIVE on the seasonal component (WHICH IS DEFAULT)
#===========================================================================================
decomposition_model(STL(log(Sales_in_trillions) ~ trend() + season(window = "periodic")),
ETS(season_adjust ~ season("N"))) -> dcmp_spec
benchmark <- getModelsTrained(2010,2014,2015,2019)
benchmark$forecasts %>%
filter(.model %in% c('stl','ets','snaive','hw_a','arima')) %>%
autoplot(Sales, level = NULL) +  geom_line(col = "grey") +
labs(title = "Benchmark model forecasts", y = "Sales in trillions") +
theme(plot.title = element_text(hjust = 0.5,size = 10),
panel.background = element_rect(fill = "white",color = "black"),
panel.grid = element_line(colour = "gray92"),
axis.text = element_text(size = 8),
axis.title.y = element_text(size = 8))
benchmark$accuracy %>%
filter(.model %in% c('stl','ets','snaive','hw_a','arima')) %>%
knitr::kable(digits = 3, caption = "Benchmark model performance")
benchmark$ModelStack %>% select(ets) %>% report()
benchmark$ModelStack %>%
select(ets) %>%
forecast(h = "5 years") %>%
autoplot(Sales, level = NULL) + geom_line(col = "grey") +
labs(title = "ETS model performance",y = "Sales in trillions", subtitle = "Blue line indicate point forecast") +
theme(plot.title = element_text(hjust = 0.5,size = 10),
panel.background = element_rect(fill = "white",color = "black"),
panel.grid = element_line(colour = "gray92"),
axis.text = element_text(size = 8),
axis.title.y = element_text(size = 8),
plot.subtitle = element_text(colour = "blue", hjust = 0.5)
)
benchmark2 <- getModelsTrained(2010,2015,2016,2019)
benchmark2$ModelStack %>%
select(ets) %>%
forecast(h = "4 years") %>%
autoplot(Sales, level = NULL) + geom_line(col = "grey") +
labs(title = "ETS model performance when 2015 data is included",y = "Sales in trillions", x ="",subtitle = "Blue line indicate point forecast") +
theme(plot.title = element_text(hjust = 0.5,size = 10),
panel.background = element_rect(fill = "white",color = "black"),
panel.grid = element_line(colour = "gray92"),
axis.text = element_text(size = 8),
axis.title.y = element_text(size = 8),
plot.subtitle = element_text(colour = "blue", hjust = 0.5)
)
benchmark2$accuracy %>%
filter(.model %in% c('stl','ets','snaive','hw_a','arima')) %>%
knitr::kable(digits = 3, caption = "Performance when 2015 data is included in the training")
benchmark3 <- getModelsTrained(1992,2014,2015,2019)
benchmark3$forecasts %>%
filter(.model %in% c('arima',
'K = 1',
'K = 4',
'K = 6',
"LMArima",
'tslm')) %>%
autoplot(Sales, level = NULL) + geom_line(col = "gray") +
labs(title = "Model training on data between 2010-14 and validation on 2015-19",
y = "Sales in trillions",
x = "") +
theme(plot.title = element_text(hjust = 0.5,size = 10),
panel.background = element_rect(fill = "white",color = "black"),
panel.grid = element_line(colour = "gray92"),
axis.text = element_text(size = 8),
axis.title.y = element_text(size = 8)) -> bench3
benchmark4 <- getModelsTrained(2010,2015,2016,2019)
benchmark4$forecasts %>%
filter(.model %in% c('arima',
'K = 1',
'K = 4',
'K = 6',
"LMArima",
'tslm')) %>%
autoplot(Sales, level = NULL) + geom_line(col = "gray")+
labs(title = "Model training on data between 2010-15 and validation on 2016-19",
y = "Sales in trillions",
x = "") +
theme(plot.title = element_text(hjust = 0.5,size = 10),
panel.background = element_rect(fill = "white",color = "black"),
panel.grid = element_line(colour = "gray92"),
axis.text = element_text(size = 8),
axis.title.y = element_text(size = 8)) -> bench4
gridExtra::grid.arrange(bench3,bench4, nrow = 2)
benchmark3$accuracy %>%
knitr::kable(digits = 3, caption = "Additional Benchmark models performance")
benchmark4$accuracy %>%
knitr::kable(digits = 3, caption = "Additional Benchmark models performance - when 2015 data in included in training")
Sales %>%
filter(year(YearMonth) < 2002)%>%
model(ets = ETS(log(Sales_in_trillions))) -> recessionslope
#forecast(h = "1 year") %>%
last5knownyears  <-  twoStepForecast(data = Sales,driftmodel = recessionslope,currentyear = 2014,RecessionYears = c(2015,2016))
last4knownyears  <-  twoStepForecast(data = Sales,driftmodel = recessionslope,currentyear = 2015,RecessionYears = 2016)
last4knownyears$forecasts %>%
as_tibble() %>%
filter(year(YearMonth) < 2020) %>%
as_fable(response = Sales_in_trillions,distribution = .distribution) %>%
mutate(.model = "composite") %>%
accuracy(Sales) -> last4knownyearsMetrics
last5knownyears$Plot + geom_line(col = "gray") +
labs(title = "Composite Model training on data between 2010-14 and validation on 2015-19",
y = "Sales in trillions",
x = "") +  scale_x_date(date_breaks = "3 years",date_labels = "%Y") +
theme(plot.title = element_text(hjust = 0.5,size = 10),
panel.background = element_rect(fill = "white",color = "black"),
panel.grid = element_line(colour = "gray92"),
axis.text = element_text(size = 8),
axis.title.y = element_text(size = 8)) -> Comp2014
last4knownyears$forecasts %>%
as_tibble() %>%
filter(year(YearMonth) < 2020) %>%
as_fable(response = Sales_in_trillions,distribution = .distribution) %>%
mutate(.model = "composite") %>%
autoplot(Sales,level = NULL) + geom_line(col = "gray") + scale_x_date(date_breaks = "3 years",date_labels = "%Y") +
labs(title = "Composite Model training on data between 2010-15 and validation on 2016-19",
y = "Sales in trillions",
x = "") +
theme(plot.title = element_text(hjust = 0.5,size = 10),
panel.background = element_rect(fill = "white",color = "black"),
panel.grid = element_line(colour = "gray92"),
axis.text = element_text(size = 8),
axis.title.y = element_text(size = 8)) -> Comp2015
gridExtra::grid.arrange(Comp2014,Comp2015, nrow = 2)
last5knownyears$metrics %>%
rbind.data.frame(benchmark3$accuracy) %>%
arrange(MAPE) %>%
knitr::kable(digits = 3, caption = "model performance on 2015-2019 validation data",format = "html") %>%
kableExtra::kable_styling(full_width = T) %>%
kableExtra::row_spec(6,color = "red",bold = T)
last4knownyearsMetrics %>%
rbind.data.frame(benchmark4$accuracy) %>%
arrange(MAPE) %>%
knitr::kable(digits = 3, caption = "model performance on 2016-2019 validation data",format = "html") %>%
kableExtra::kable_styling(full_width = T) %>%
kableExtra::row_spec(3,color = "red",bold = T)
Quandl::Quandl("ODA/USA_NGAP_NPGDP",api_key="Qzvhd-siFFvWasZ1YGpJ") -> OutputGDPGap
OutputGDPGap %>%
mutate(Date = yearmonth(Date)) %>%
mutate(RecessionYears = factor(ifelse(year(Date) %in% c(2001,2008,2009),"Recession","Non-Recession"),levels = c("Recession","Non-Recession"))) %>%
as_tsibble(index = Date) %>%
ggplot(aes(x=Date, y = Value)) + geom_point(aes(col = RecessionYears))+
geom_line() +
labs(title = "GDP Output gap") +
ylab("GDP output gap") + xlab("") + scale_x_date(date_breaks = "5 years",date_labels = "%Y") +
theme(panel.background = element_rect(fill = "white",color = "black"),
panel.grid = element_line(colour = "lightgray"),
#legend.position = "none",
plot.caption  = element_text(colour = "#87CEFF"),
plot.title = element_text(hjust = 0.5))
futureyears_2020 <- twoStepForecast(Sales,recessionslope,2019,2020)
futureyears_2020$Plot   + scale_x_date(date_breaks = "5 years",date_labels = "%Y") +
labs(title = "Point forecast for US sales in trillions for the next 5 years using Composite of ETS and ARIMA models",
y = "Sales in trillions",
x = "") +  geom_line(col = "grey") +
theme(panel.background = element_rect(fill = "white",color = "black"),
panel.grid = element_line(colour = "lightgray"),
#legend.position = "none",
plot.caption  = element_text(colour = "#87CEFF"),
plot.title = element_text(hjust = 0.5, size = 10))
last5knownyears$forecast %>%
as_tibble() %>%
filter(year(YearMonth) < 2019) %>%
mutate(actuals =  Sales %>%
filter(year(YearMonth) > 2015,year(YearMonth) < 2020 ) %>%
select(Sales_in_trillions) %>% .$Sales_in_trillions) %>%
mutate(error = actuals - Sales_in_trillions) %>% select(error) %>%
.$error %>% mean() -> meanshock
last5knownyears$forecast %>%
as_tibble() %>%
filter(year(YearMonth) < 2019) %>%
mutate(
actuals =  Sales %>%
filter(year(YearMonth) > 2015, year(YearMonth) < 2020) %>%
select(Sales_in_trillions) %>%
.$Sales_in_trillions
) %>%
mutate(error = actuals - Sales_in_trillions) %>% select(error) %>% .$error %>% sd() -> sdshock
#***************************************************************************************************
# The function name twoStep forecast is a misnomer. It should probably be renamed CompositeModel().
#***************************************************************************************************
twoStepForecast(Sales,recessionslope,2019,2020) -> futureyears_2020
twoStepForecast(Sales,recessionslope,2019,2021) -> futureyears_2021
twoStepForecast(Sales,recessionslope,2019,2022) -> futureyears_2022
twoStepForecast(Sales,recessionslope,2019,2023) -> futureyears_2023
twoStepForecast(Sales,recessionslope,2019,2024) -> futureyears_2024
twoStepForecast(Sales,recessionslope,2019,NULL) -> futureyears_NoRecession
futureyears_2020$forecasts %>%
as_tibble() %>%
rbind.data.frame(
futureyears_2021$forecast %>%
as_tibble() %>%
rbind.data.frame(
futureyears_2022$forecast %>%
as_tibble() %>%
rbind.data.frame(
futureyears_2023$forecast %>%
as_tibble() %>%
rbind.data.frame(
futureyears_2024$forecast %>%
as_tibble()
) %>%
rbind.data.frame(
futureyears_NoRecession$forecasts %>%
as_tibble()
)
)
)
) -> df
set.seed(123)
addshocks <- function(){
df %>% mutate(generate = Sales_in_trillions + rnorm(1,meanshock,sdshock)) # based on
}
replicate(100,addshocks(),simplify = F) -> bootstappederrors
bootstappedPaths <- reduce(bootstappederrors,rbind)
bootstappedPaths %>%
select(-Sales_in_trillions) %>%
mutate(key = as.factor(rep(1:600,each = 60)) )%>%
select(-.model) %>%
rename(Sales_in_trillions = generate, .model = key) %>%
as_tsibble(index = YearMonth, key = .model) %>%
as_fable(response = Sales_in_trillions,distribution = .distribution)-> generatedfcts
generatedfcts %>%
autoplot(Sales, level = NULL ) +  geom_line(col = "grey") + theme(legend.position = "none",
panel.background = element_rect(fill = "white",color = "black"),
panel.grid = element_line(colour = "lightgray"),
plot.caption  = element_text(colour = "#87CEFF"),
plot.title = element_text(hjust = 0.5, size = 10)) + labs(title = "60 simulations using approach -1", y = "Sales in trillions", x = "")
# Likelihood of sales surpassing at least once in the 5 years.
generatedfcts %>%
as_tibble() %>%
group_by(.model) %>%
summarise(Over_1.8 = ifelse(sum(Sales_in_trillions > 1.8),1,0)) %>%
ungroup() %>%
summarise(Chance = mean(Over_1.8)) -> Over1.8
